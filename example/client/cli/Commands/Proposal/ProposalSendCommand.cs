using System.CommandLine;
using Common;
using Common.Cli;
using Contracts.App;
using Contracts.Process;
using SyncCli.Extensions;

namespace SyncCli.Commands;
public class ProposalSendCommand : CliCommand
{
    public ProposalSendCommand() : base(
        "send",
        "Send a Proposal as a Package Resource to the Process Service via the Process Graph API",
        new Func<string, string, string, string, int?, Task>(Call),
        new()
        {
            new Option<string>(
                new string[] { "--name", "-n" },
                getDefaultValue: () => "CLI Generated Package",
                description: "Package name"
            ),
            new Option<string>(
                new string[] { "--description", "--desc", "-d" },
                getDefaultValue: () => "A Package generated by the Sync CLI",
                description: "Package description"
            ),
            new Option<int?>(
                new string[] { "--id", "-i" },
                description: "Proposal ID"
            )
        }
    )
    { }

    static async Task Call(string app, string process, string name, string description, int? id)
    {
        if (id is null)
        {
            Console.WriteLine("A Proposal ID must be provided to send a Proposal");
            return;
        }

        AppGraph ag = App.GetAppGraph(app);
        ProcessGraph pg = App.GetProcessGraph(process);

        Console.WriteLine($"Retrieving Proposal record {id}");
        ProposalContract? proposal = await ag.GetProposal(id.Value);

        if (proposal is null)
        {
            Console.WriteLine($"Proposal record {id} was not found");
            return;
        }

        PackageContract package = await pg.GetByResource(proposal.Id, proposal.Type)
            ?? new()
            {
                Name = name,
                Description = description,
                Resources = new List<ResourceContract>()
                {
                    ResourceContract.Cast(proposal)
                }
            };

        Console.WriteLine($"Sending Proposal Package {package.Name}");
        ApiResult<PackageContract>? result = await pg.Send(package);

        if (result is not null)
            Console.WriteLine(result.Message);
        else
            Console.WriteLine($"Package {package.Name} was unable to be sent");
    }
}